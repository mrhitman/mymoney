# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type BankConnection {
  id: String!
  type: String!
  enabled: Boolean
  createdAt: String!
  meta: JSON!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type User {
  id: ID!
  firstName: String!
  middleName: String
  lastName: String
  email: String!
}

type IconDto {
  type: String!
  name: String!
  backgroundColor: String
  color: String
}

type Category {
  id: ID!
  name: String!
  isFixed: Boolean!
  type: CategoryType
  icon: IconDto
}

enum CategoryType {
  income
  outcome
  transfer
}

type Currency {
  id: ID!
  name: String!
  description: String
  symbol: String!
  code: Float!
  rate: Float!
}

type Pocket {
  currencyId: String!
  amount: Float!
  currency: Currency!
}

type Goal {
  id: ID!
  goal: Float!
  progress: Float!
  progressPercent: Float!
  name: String!
  pockets: [Pocket!]!
  currencyId: String!
  currency: Currency!
  syncAt: Int!
  createdAt: Int!
}

type Wallet {
  id: ID!
  name: String!
  description: String
  type: String!
  allowNegativeBalance: Boolean!
  pockets: [Pocket!]!
  syncAt: Int!
  createdAt: Int!
}

type GoalSaveResponse {
  goal: Goal!
  wallet: Wallet!
}

"""Statistic info about transactions"""
type StatisticByCurrency {
  currencyId: String!
  currency: Currency!
  amount: Float!
}

"""Statistic info about transactions"""
type StatisticByCategory {
  categoryId: String!
  category: Category!
  amount: Float!
}

"""Statistic info about transactions"""
type StatisticByPeriod {
  date: String!
  amount: Float!
}

type Transaction {
  id: ID!
  type: TransactionType!
  categoryId: String
  category: Category!
  currencyId: String!
  currency: Currency!
  sourceWalletId: String
  sourceWallet: Wallet
  destinationWalletId: String
  destinationWallet: Wallet
  amount: Float!
  fine: Float
  date: DateTime!
  description: String
  createdAt: Int!
}

enum TransactionType {
  income
  outcome
  transfer
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type Login {
  accessToken: ID!
  refreshToken: String!
  profile: User!
}

type Refresh {
  accessToken: ID!
  refreshToken: String!
}

type Query {
  connectors: [BankConnection!]!
  profile: User!
  categories(type: String): [Category!]!
  category(id: String!): Category!
  currencies: [Currency!]!
  currency(id: String!): Currency!
  exchange(
    """Currency name (eg. USD)"""
    to: String!

    """Currency name (eg. USD)"""
    from: String!
    amount: Float!
  ): Float!
  goals: [Goal!]!
  goal(id: String!): [Goal!]!
  statisticByPeriod(
    """Unix timestamp"""
    to: Float

    """Unix timestamp"""
    from: Float
    type: TransactionType

    """Currency short name, eg. USD"""
    currencyName: String
    walletIds: [String!]
    interval: String = "month"
  ): [StatisticByPeriod!]!

  """Statistic grouped by categories"""
  statisticByCategory(
    """Unix timestamp"""
    to: Float

    """Unix timestamp"""
    from: Float
    type: TransactionType

    """Currency short name, eg. USD"""
    currencyName: String
    walletIds: [String!]
  ): [StatisticByCategory!]!
  statisticByCurrency(walletIds: [String!]): [StatisticByCurrency!]!
  transactions(type: TransactionType, categoryId: String, currencyId: String, walletId: String): [Transaction!]!
  transaction(id: String!): Transaction!
  wallets: [Wallet!]!
  wallet(id: String!): Wallet!
}

type Mutation {
  import: String!
  connectMonobank(token: String!): String!
  disconnectMonobank(token: String!): String!
  connectPrivat24(password: String!, merchant_id: String!): String!
  disconnectPrivat24(merchant_id: String!): String!
  createGoal(createGoalData: GoalCreate!): Goal!
  updateGoal(updateGoalData: GoalUpdate!): Goal!
  deleteGoal(id: String!): Goal!
  saveToGoal(saveGoalData: GoalSave!): GoalSaveResponse!
  createTransaction(transactionCreateData: TransactionCreate!): Transaction!
  updateTransaction(transactionUpdateData: TransactionUpdate!): Transaction!
  createWallet(walletCreateData: WalletCreate!): Wallet!
  updateWallet(walletUpdateData: WalletUpdate!): Wallet!
  deleteWallet(id: String!): Wallet!
  login(loginData: LoginInput!): Login!
  register(registerData: RegisterInput!): User!
  refresh(refreshData: RefreshInput!): Refresh!
}

input GoalCreate {
  goal: Float!
  progress: Float
  name: String!
  pockets: [PocketInput!]
  currencyId: String!
  createdAt: Int
}

input PocketInput {
  currencyId: String!
  amount: Float!
}

input GoalUpdate {
  id: ID!
  goal: Float
  currencyId: String
  name: String!
  pockets: [PocketInput!]
  updatedAt: Int
}

input GoalSave {
  toGoalId: String!
  fromWalletId: String!
  currencyId: String!
  amount: Float!
}

input TransactionCreate {
  id: String
  categoryId: String!
  currencyId: String!
  sourceWalletId: String
  destinationWalletId: String
  fine: Float
  amount: Float!
  date: Int!
  type: String!
  description: String
  isNecessary: Boolean
  isTemplate: Boolean
  createdAt: Int
}

input TransactionUpdate {
  id: String!
  categoryId: String
  currencyId: String
  sourceWalletId: String
  destinationWalletId: String
  fine: Float
  date: Int!
  description: String
  isNecessary: Boolean
  isTemplate: Boolean
  updatedAt: Int
  deletedAt: Int
}

input WalletCreate {
  name: String!
  description: String
  type: String
  allowNegativeBalance: Boolean!
  pockets: [PocketInput!]!
  createdAt: Int
}

input WalletUpdate {
  id: String!
  name: String
  description: String
  type: String
  allowNegativeBalance: Boolean!
  pockets: [PocketInput!]
  updatedAt: Int
}

input LoginInput {
  email: String!
  password: String!
}

input RegisterInput {
  firstName: String!
  middleName: String
  lastName: String
  email: String!
  password: String!
}

input RefreshInput {
  refreshToken: String!
}
