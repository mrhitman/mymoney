fragment wallet on Wallet {
  id
  name
  type
  description
}

fragment transaction on Transaction {
  id
  type
  currency {
    id
    name
    description
    symbol
  }
  category {
    name
    type
    icon {
      type
      name
      backgroundColor
      color
    }
  }
  date
  description
  amount
}

query getTransaction($id: String!) {
  transaction(id: $id) {
    ...transaction
    sourceWallet {
      ...wallet
    }
    destinationWallet {
      ...wallet
    }
    meta
  }
}

query export(
  $type: TransactionType
  $from: Float
  $to: Float
  $walletIds: [String!]
  $categoryIds: [String!]
  $search: String
  $amountGte: Float
  $amountLte: Float
  $order: String
  $orderBy: String
) {
  export(
    type: $type
    from: $from
    to: $to
    walletIds: $walletIds
    categoryIds: $categoryIds
    search: $search
    amountGteFilter: $amountGte
    amountLteFilter: $amountLte
    orderBy: $orderBy
    order: $order
  )
}

query getTransactions(
  $type: TransactionType
  $from: Float
  $to: Float
  $limit: Float
  $offset: Float
  $walletIds: [String!]
  $categoryIds: [String!]
  $search: String
  $amountGte: Float
  $amountLte: Float
  $order: String
  $orderBy: String
) {
  transactions(
    type: $type
    from: $from
    to: $to
    limit: $limit
    offset: $offset
    walletIds: $walletIds
    categoryIds: $categoryIds
    search: $search
    amountGteFilter: $amountGte
    amountLteFilter: $amountLte
    orderBy: $orderBy
    order: $order
  ) {
    totalCount
    items {
      ...transaction
      sourceWallet {
        ...wallet
      }
      destinationWallet {
        ...wallet
      }
    }
  }
}

query getWalletTransactions(
  $type: TransactionType
  $limit: Float
  $offset: Float
  $walletId: String!
) {
  wallet(id: $walletId) {
    id
    name
    description
  }
  transactions(type: $type, limit: $limit, offset: $offset, walletIds: [$walletId]) {
    totalCount
    items {
      ...transaction
    }
  }
}
